-------- Flask Tuto ---------------------------------------------

https://www.youtube.com/watch?v=Ihp_cG7c2Rk&list=PLV1TsfPiCx8PXHsHeJKvSSC8zfi4Kvcfs&index=1

Flask est un framework : un ens de module python qui permet de concevoir une application web dans le langage python en fournissant 
des outils et fonctionnalités courantes

--------- Enreg sur github avec gitbash

git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:OlearnDev/Flask.git
git push -u origin main


------- Configurer ou ajouter python dans le path du terminal VS

    - Installer python sur la machine de travail (ici c:\Python)
    
    - Aller dans le répertoire de travail et créer un dossier .vscode :
        cd C:\Cours\Flask\demos
        mkdir .vscode
        
    - Créer le fichier settings.json dans ce dossier avec le contenu :
      
      $cat settings.json
         {
         "python.pythonPath": "C:\Python"
         }

    - Ouvrir et Vérifier dans un terminal, par exemple la version de python installée :
        
        PS C:\Cours\Flask\demos> python -V
            Python 3.12.7


------- Créer un env virtuel de travail :

En général :

    python -m venv env              : créer un env nommé env 
    flask --version                 : voir la version de flask installé
    pip install flask python-dotenv : pour installer flask et python-dotenv
    ./env/Scripts/activate			: Pour activer l'env sous windows ou linux. (env) s'affiche en debut de ligne de commande
    deactivate						: Pour quitter env
    pip freeze > requirements.txt	: Liste toutes les dépendences installées dans env dans un fichier, facile à importer sur une nouvelle machine
    pip install -r requirements.txt : pour installer tous les elts dans le fichier
    python mon_app.py               : Pour executer le code dans le fichier .py

Dans notre cas :

    python -m venv env
    ./env/Scripts/activate
    pip install flask python-dotenv
    
    (env) PS C:\Cours\Flask\demos\env> flask --version 
        Python 3.11.9
        Flask 3.1.0
        Werkzeug 3.1.3


--- vi mon_app.py 

from flask import Flask         <--- Import de la classe Flask du module Flask

app = Flask(__name__)             <--- création d'une fonction

@app.route("/")                 <--- permet d'afficher à la racine de notre page web, le résultat de la fonction hello en dessous
def hello():
    return "<p>Welcome to my site!</p>"

if __name__== '__main__':       <---  Les 2 lignes suivantes permettent de lancer l'application lorsqu''on va exécuter un script  
    app.run(debug=True)               avec un terminal
    


EOF  ----------- 

- Ouvrir un terminal et se diriger dans le rep o`est sauvegardé le fichier mon_app.py pour exécuter le code :

    cd C:\Cours\Flask\demos

    (env) PS C:\Cours\Flask\demos\env> python mon_app.py

        * Serving Flask app 'mon_app'
        * Debug mode: on
        WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.

        * Running on http://127.0.0.1:5000
        Press CTRL+C to quit

        * Restarting with stat
        * Debugger is active!
        * Debugger PIN: 544-789-493
        127.0.0.1 [26/Jan/2025 19:54:46] "GET / HTTP/1.1" 200
        127.0.0.1 [26/Jan/2025 19:54:47] "GET /favicon.ico HTTP/1.1" 404

- Lancer http://127.0.0.1:5000 dans le navigateur web :

    Welcome to my site!             <--- le message s''affiche sur la page 
    


- On remarque le message suivant dans le terminal 

    "GET / HTTP/1.1" 200   <--- code 200 indique que la page a été bien trouvée
    
    
- Modifions le code pour inclure un fichier index.html qui sera appelé à la place du paragraphe html dans la fonction hello :

    cd C:\Cours\Flask\demos
    mkdir templates
    cd templates

*** --- vi index.html   


<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Mon appli</title>
</head>
<body>
    <p>Welcome to my site!</p>
</body>
</html>

--- vi mon_app.py 

from flask import Flask, render_template        <---  import de render_template du module flask
import datetime

app = Flask(__name__)

@app.route("/")
def hello():
    return render_template("index.html")        <--- appel fichier index.html

@app.route("/heure")                            <--- Ajout d''une route pour lire les heures 
def heure():
    date_heure = datetime.datetime.now()
    h = date_heure.hour
    m = date_heure.minute
    s = date_heure.second
    #print(h, m, s)
    #return "Heure actuelle"
    return render_template("heure.html", heure=h, minute=m, seconde=s)

if_name_ -- '__main__':
    app.run(debug=True)    
    


**-------------- vi index.html -------------

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Mon appli</title>
</head>
<body>
    <h1>Quelle heure est-il ?</h1>
    <p>Il est {{ heure }} h {{ minute }} min {{ seconde }} s.</p>
</body>
</html>


--------- Execution web 

http://http://127.0.0.1:5000/heure

Quelle heure est-il ?
Il est 21 h 55 min 1 s.



---- Créer une route qui va permettre de passer en param la classe de l'élève

- Pour afficher tous les élèves :

from flask import Flask, render_template

app = Flask (__name__)

@app.route("/")
def hello():
    return render_template("index.html")

eleve_list = [
    {'name': 'Dupont', 'prenom': 'Jean', 'class': '2A'},
    {'name': 'Dupont', 'prenom': 'Jeanne', 'class': 'TG2'},
    {'name': 'Dupont', 'prenom': 'Jeanne', 'class': 'TG2'},
    {'name': 'Marchand', 'prenom': 'Marie', 'class': '2A'}, 
    {'name': 'Martin', 'prenom': 'Adeline', 'class': '1G1'},
    {'name': 'Dupont', 'prenom': 'Lucas', 'class': '2A'}
]

@app.route("/eleves")
def eleves():
    return render_template("eleve.html", eleves=eleve_list) --> var eleves à exploiter dans le template "eleve.html"

if __name__== '__main__':
    app.run(debug=True)
    

- Verifier le resultat dans http://127.0.0.1:5000/eleves

<body>
    <h1>Liste d'élèves</h1>             
    {% for eleve in eleves %}           <--- On met les instructions python entre {%%}. Boucle for pour parcourir le dict eleves
        <p>{{ eleve['name'] }}</p>      <--- On récupère seulement le nom de l'élève. On met dans un parapgraphe pour séaprer les lignes offichées
    {% endfor %}
</body>

- Verifier le resultat dans http://127.0.0.1:5000/eleves

    Liste d'élèves

    Dupont
    Dupont
    Dupont
    Marchand
    Martin
    Dupont


- Pour afficher le résultat sous forme de liste : 

<body>
    <h1>Liste d'élèves</h1>
    <ul>
        {% for eleve in eleves %}
            <li>{{ eleve['name') }} {{ eleve['prenom') }}, {{ eleve['class'] }}</li>
        {% endfor %}
    </ul>
</body>

- Verifier le resultat dans http://127.0.0.1:5000/eleves

 Liste d'élèves
    
    Dupont Jean, 2A
    Dupont Jeanne, TG2
    Dupont Jeanne, TG2
    Marchand Marie, 2A
    Martin Adeline, 1G1
    Dupont Lucas, 2A


- Pour importer les params passés dans l'url,

    * Au niveau des modules, importer 'request'
    
    from flask import Flask, render_template, request
    
    * Au niveau de notre fonction 'eleve'
    
    @app.route("/eleves")
    def eleves():
        classe = request.args['c']                                 <--- request.args est un dic accédé via les clés
        return render_template("eleve.html", eleves=eleve_list) 

    
    NB : request.args['c'] renvoie une erreur si la clé n''existe pas ou non indiqué. 
         Utiliser 'request.args.get('c')' pour éviter ces erreurs
 

- Pour filtrer selon la liste entrée dans l'url :
 
    @app.route("/eleves")
    def eleves():
        classe = request.args.get('c')
        eleves_selectionnes = [eleve for eleve in eleve_list if eleve['class'] == classe]
        #classe = request.args['autre']
        #print(classe)
        #return render_template("eleve.html", eleves=eleve_list)
        return render_template("eleve.html", eleves=eleves_selectionnes) 


   ex: http://127.0.0.1:5000/eleves?c=2A
   
   Liste d'élèves
    Dupont Jean, 2A
    Marchand Marie, 2A
    Dupont Lucas, 2A

- Essayons de modifier pour renvoyer un message s'il n'y a pas d'elèves pour une classée demandée : 


    @app.route("/eleves")
    def eleves():
        classe = request.args.get('c')
        if classe:
            eleves_selectionnes = [eleve for eleve in eleve_list if eleve['class'] == classe]
        else:
            eleves_selectionnes = []            
        return render_template("eleve.html", eleves=eleves_selectionnes) 
    
    
 Dans le fichier 'eleve.html'  : 
 
    <body>
        <h1>Liste d'élèves</h1>
        {% if eleves|length ==0 %}
            <p>Aucun élève ne correspond à la recherche.</p>
        {% else %}
            <ul>
                {% for eleve in eleves %}
                <li>{{ eleve['name'] }} {{ eleve['prenom'] }}, {{ eleve['class'] }}</li>
                {% endfor %}
            </ul>
        {% endif %}
    </body>
    
    
  ex: http://127.0.0.1:5000/eleves?c=
  
    Liste d'élèves

    Aucun élève ne correspond à la recherche. 
    
    
    
    