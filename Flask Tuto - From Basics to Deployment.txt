-------- Flask Tuto - From Basics to Deployment ----------------

https://www.youtube.com/watch?v=oQ5UfJqW5Jo


---- Create a virtual environment in our workspace called : .venv

Interpreter :

You can python interpreter using left menu : Manage --> Command Palette --> in search bar type: "Python: Select interpreter".
    You can select python[3].exe for anaconda if installed or another python[3].exe 

Using terminal : 

    cd C:\Cours\Flask\Full
    > python -m venv .venv          --> Check folder .venv created under "Full" folder
    > cd C:\Cours\Flask\Full\.venv\Scripts
    >./activate
(.venv) PS C:\Cours\Flask\Full\.venv\Scripts> flask --version 
    Python 3.11.9
    Flask 3.0.3
    Werkzeug 3.0.4

(.venv) PS ..> pip[3] freeze                --> To get the list of packages installed if any
(.venv) PS ..>pip3 install flask            --> Install everything needed for basic flask application in the env

(.venv) PS ..> pip3 freeze       
    blinker==1.9.0
    click==8.1.8
    colorama==0.4.6
    Flask==3.1.0
    itsdangerous==2.2.0
    Jinja2==3.1.5
    MarkupSafe==3.0.2
    Werkzeug==3.1.3


------- Create file app.py ----------
    
from flask import Flask

app = Flask (__name__)

@app.route('/')
def index():
    return "Hello World"

@app.route('/hello')
def hello():
    return "Hello World"
    
    
if __name__ == '__main__':                  --> if application uses main page, app.run will run with different options :
   app.run(host='0.0.0.0', debug=True)          debug=true : in dev mode, to not restart server but refresh to update automatically changes
                                                host=[127.0.0.1 (local ip) or ip_machine or 0.0.0.0 (for localhost and private local ip @)]. 
                                                port=xxxx : We can specify a port. If not, it will be default port 5000


    (.venv) PS ..>pip3 freeze > requirements.txt : Lists dependences installed in env in a file, easy to import in github and people can install all these depences using :
    (.venv) PS ..>pip3 install -r requirements.txt : installs of packages in another env
    
------- Create a dynamique route 

@app.route('/greet/<name>')
def greet(name):
    return f"Hello {name}"

            ------------------
            
@app.route('/add/<int:number1>/<int:number2>')
def add(number1, number2):
    return f'{number1} + {number2} = {number1 + number2}'

    ---> http://127.0.0.1:5000/add/10/20
    
        10 + 20 = 30
        
            ------------------
            
@app.route('/handle_url_params')
def handle_params():
    if 'greeting' in request.args.keys() and 'name' in request.args.keys():     <-- add request in modules imported
        greeting = request.args['greeting']
        name = request.args.get('name')
        return f'{greeting}, {name}'
    else:
        return 'Some parameters are missing'

    ---> http://127.0.0.1:5000//handle_url_params?name=Toto&greeting=Bonjour

        Bonjour, Toto
        
    ---> http://127.0.0.1:5000//handle_url_params?name=Toto   

        Some parameters are missing

Methods            ----------------------- 
            
    > curl http://127.0.0.1:5000/               --> Sends a simple GET request
    > curl -X POST http://127.0.0.1:5000/       --> Sends a POST request specified with option -X
    > curl -I http://127.0.0.1:5000/            --> To get the response header

To allow POST method, specify it in the route definition like :

@app.route('/hello', methods=['POST','GET'])

4 main methods :

    GET     : Get or Read data
    POST    : Add or Create data
    PUT     : Update data
    DELETE  : Delete data

------ If we want to manage response :

@app.route('/reponse')
def reponse():
    response = make_response('Hello World \n')                          <--- Import 'make_response'
    response.status_code = 202
    response.headers['content-type'] = 'application/octet-stream'
    return response


------------- HTML and TEMPLATES --------------------


Create an index.html file : -------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Flask App</title>
</head>
<body>
    <h1>Hello World</h1>
    <p>{{myvalue}}</p>
    <p>{{myresult}}</p>
</body>
</html>


Create a demohtml.html file : -------------------------

from flask import Flask, render_template

app = Flask(__name__, template_folder='templates')

@app.route('/')
def index():
    myvalue = 'Resultat'
    myresult = 10 + 20
    return render_template('index.html', myvalue = myvalue, myresult = myresult )

 
if __name__ == '__main__':                  
    app.run(host='0.0.0.0', debug=True)
    
 
    --->  http://127.0.0.1:5000/
    
    Hello World
    Resultat
    30

                -------------------------------
                
                
<body>
    <h1>Hello World</h1>
    <ul>
        {% for item in mylist %}
            <li>{{ item }}</li>
        {% endfor %}
    </ul>
    
    <p>{{ mylist }}</p>
</body>


@app.route('/')
def index():
    mylist= [10, 20, 30, 40, 50]
    return render_template('index.html', mylist=mylist)

    
    --->  http://127.0.0.1:5000/
    
    
    Hello World

    • 10
    • 20
    • 30
    • 40
    • 50

    [10, 20, 30, 40, 50]
    

---------------- Color in red for value = 30

<body>
    <h1>Hello World</h1>
    <ul>
        {% for item in mylist %}
            {% if item == 30 %}
                <li style="color: red">{{ item }}</li>
            {% else %}
                <li>{{ item }}</li>
            {% endif %}
        {% endfor %}
    </ul>
    <p>{{ mylist }}</p>   
</body>   
    

We can simplify the above like below :

    <ul>
        {% for item in mylist %}
            <li {% if item == 30 %}style="color: red" {% endif %}>{{ item }}</li>
        {% endfor %} I
    </ul>  
    

----------------- Inherit Template ------------------------------

We create a base teamplate called 'base.html' with content below which should be the same on all html files. 
We make the title dynamic using : {% block title %}{% endblock %} with a default value if not filled :

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Default Value{% endblock %}</title>
</head>
<body>
    <p>This will always be here.</p>
    {% block content %}{% endblock %}
</body>
</html>   
    
        ---- The index.html will become :

{% extends "base.html" %}
{% block title %} Index Page{% endblock %}

{% block content %}
    {% for item in mylist %}
        {% if item == 30 %}
            <li style="color: red">{{ item }}</li>
        {% else %}
            <li>{{ item }}</li>
        {% endif %}
    {% endfor %}
{% endblock %}

------------------- Filtering --------------------

---- Create filters.html file :

{% extends "base.html" %}
{% block title %}Filter Page{% endblock %}

{% block content %}
    <h1>Filters</h1>
    <p>{{ some_text }}</p>
    <p>{{ some_text|upper }}</p>            <--- upper filter applied
    <p>{{ some_text|lower }}</p>            <--- lower filter applied
    <p>{{ some_text|upper }}</p>
    <p>{{ some_text|title }}</p>
    <p>{{ some_text|replace('l', 'L') }}</p>
{% endblock %} 
    

@app.route('/filters')
def filters():
    sometext = 'Text to filter'
    return render_template('filters.html', some_text=sometext )


-----> http://127.0.0.1:5000/filters
    
    This will always be here.

    Filters

    Text to filter
    TEXT TO FILTER              
    text to filter
    Text To Filter
    Text to fiLter
    
We can create our custom filter called reverse string :

@app.te('reverse_string')
def reverse_string(s):
    return s[::-1]


{% block content %}
    ...
    <p>{{ some_text|reverse_string }}</p>
{% endblock %}


-----> http://127.0.0.1:5000/filters   
retlif ot txeT
    
@app.template_filter('repeat')
def repeat(s, times=2):
    return s * times
    
-----> http://127.0.0.1:5000/filters  
    Text to filterText to filterText to filterText to filterText to filter
    
-----> http://127.0.0.1:5000/filters  
    TeXt tO FiLtEr    
    

-- Redirect to a route :

In the index.html , we add a link to 'Others' :

{% extends "base.html" %}
{% block title %} Index Page{% endblock %}

{% block content %}
    {% for item in mylist %}
        {% if item == 30 %}
            <li style="color: red">{{ item }}</li>
        {% else %}
            <li>{{ item }}</li>
        {% endif %}
    {% endfor %}
    
    <a href="{{ url_for('filters') }}">Check filters</a>
{% endblock %}


And we add a route : 

import ...., redirect, url_for

@app.route('/redirect_endpoint')
def redirect_endpoint():
    return redirect(url_for('filters'))

-----> http://127.0.0.1:5000/redirect_endpoint
    
    It redirects to : http://127.0.0.1:5000/

    This will always be here.

    10
    20
    30
    40
    50
    Check filters 
    
    And if we click on 'Check filters', it shows the content of : http://127.0.0.1:5000/filters


------------ Forms ----------------

We create 'forms.py' file : --------------

from flask import Flask, render_template, request

app Flask(__name__, template_folder='templates')

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'GET':
        return render_template('index.html')
        elif request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        if username == 'neuralnine' and password =='password':
            return 'Success'
        else:
            return 'Failure'


if __name__ == '__main__':
app.run(host='0.0.0.0', debug=True)

We create 'forms.py' file : --------------

{% block content %}
<h1>Hello World</h1>
    <form method="POST" action="{{ url_for('index') }}">
        <input type="text" name="username" placeholder="Username"><br>
        <input type="password" name="password" placeholder="Password"><br>
        <input type="submit" value="Login">
    </form>
{% endblock %}


-----> http://127.0.0.1:5000/ 

    < see zone texts to enter :username and password and submit button> 


--------- Upload a file 

{% block content %}
<h1>Hello World</h1>
    <form method="POST" action="{{ url_for('index') }}">
        <input type="text" name="username" placeholder="Username"><br>
        <input type="password" name="password" placeholder="Password"><br>
        <input type="submit" value="Login">
    </form>


    <h1>File Upload</h1>
    <form method="POST" action="{{ url_for('file_upload') }}" enctype="multipart/form-data">    
        <input type="file" name="file" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel, text/plain" required=required>
        <input type="submit" value="Upload file">
    </form>

{% endblock %}

-----> http://127.0.0.1:5000/ 

    < see upload file zones>

---------- Working with files

Install panda package using terminal :

> pip3 install panda

In forms.py :

import panda as pd













